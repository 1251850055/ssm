//1.继承
//	super关键字；
//		可以访问父类的构造方法，访问父类的成员
//		包括父类的属性，一般方法等
//	1.super 只能出现在 子类（子类的构造方法或者普通方法）中，
//	而不能出现在其他位置
//	2.super 用于访问父类的成员（父类的属性，方法，构造方法）
//	3.具有访问权限限制的，无法通过super访问private成员。
  
//方法的重写；
//重写方法与被重写方法具有相同的	 方法名
//重写方法与被重写方法具有相同的	参数列表
//重写方法与被重写方法具有相同的	返回值类型
//重写方法不能缩小被重写方法的		访问权限
//
//重载（Overload）与重写（Override）******
//a.重载是涉及到同一个类中，要求方法名相同，参数列表或者是个数不同。
//b.重写是涉及到父类子类中，同名的方法，参数列表相同，返回值类型也相同。

//	总结：子类继承父类中的所有属性和方法
//		实例化子类的，会间接的调用父类的构造器

//多态;
//	通常指的是能够呈现不同种形式或者是形态，
//	在程序设计属于中能够引用不同类型对象
//	并且能够自动调用引用对象的方法，
//	也就是根据作用到不同的类型，响应不同的操作。

// 向上转型；
// 		子类转换成父类的规则
// 		a.将一个父类的引用指向一个子类的对象，成为向上转型，自动转换
// 		b.此时通过父类引用变量调用的方法是子类覆盖父类的方法，
// 			而不是父类的方法
//		c.此时通过父类引用变量无法调用子类特有的方法

//	向下转型；
//			<子类> <引用变量名>=<子类>(父类的引用变量)；
//			  Dog              d          =  (Dog) p；

//	instanceof 用于判断；
//	使用instanceof时，对象类型必须和instanceof后面的
//	参数所指定的类 在继承上是上下级关系，否则就会出现编译错误。
//	instanceof *通常*和强制类型结合使用
//	(判断左右两边是否是继承关系  实现接口)   亲子鉴定	  




//	 * 抽象类   
//	 *  a. 用abstract关键字修饰的类，就是抽象类。
//	 *    在java中，当一个类的方法 被abstract 修饰，
//	 *    该方法称为 抽象方法，抽象方法所在的类,必须
//	 *    是抽象类
//	 *  b. 当一个方法被定义成抽象方法之后，意味着
//	 *  该方法不会有具体的实现,而是在抽象类的子类通过
//	 *  方法的重写进行实现的。
//	 *  
//	 *  c. 普通类和抽象类的 区别：
//	 *  1. 抽象类 用abstract 修饰，普通类不需要
//	 *  2.普通的类可以实例化，抽象类不可以实例化
//	 *  
//	 *  当一个类定义成抽象类，它可以包含各种类型的成员，
//	 *  包括属性，方法等，其中方法可以是普通方法，也可以
//	 *  是抽象方法。
